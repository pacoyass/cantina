// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  reservations Reservation[]

  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  order       Int    @default(0)

  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Decimal @db.Decimal(10, 2)
  image       String?
  isVegetarian Boolean @default(false)
  isVegan     Boolean @default(false)
  isAvailable Boolean @default(true)
  isSpecial   Boolean @default(false) // For weekend specials like Pollo a la Brasa
  categoryId  String

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("menu_items")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String?
  customerName String
  customerEmail String
  customerPhone String
  type        OrderType   // TAKEOUT or DELIVERY
  status      OrderStatus @default(PENDING)
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @db.Decimal(10, 2)
  total       Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  notes      String?

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Reservation {
  id           String            @id @default(cuid())
  userId       String?
  customerName String
  customerEmail String
  customerPhone String
  date         DateTime
  time         String
  partySize    Int
  status       ReservationStatus @default(PENDING)
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletter_subscriptions")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contact_messages")
}

enum OrderType {
  TAKEOUT
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELLED
}
